from Crypto.PublicKey import RSA

def mod_inv(a, n):
    t, r = 0, n
    new_t, new_r = 1, a

    while new_r != 0:
        quotient = r // new_r
        t, new_t = new_t, t - quotient * new_t
        r, new_r = new_r, r - quotient * new_r

    if r > 1:
        raise Exception("a is not invertible")
    if t < 0:
        t = t + n

    return t

p = 186076660469935544364191142499091336399
q = 298197055562909131871702501023109228459

n = p * q
e = 65537

phi = (p-1) * (q-1)

d = mod_inv(e, phi)

key_params = (n, e, d, p, q)
key = RSA.construct(key_params)

with open("flag.enc", "rb") as f:
    flag = f.read()

print(key.decrypt(flag))
