pragma solidity ^0.5.10;

contract ECorp {
    mapping (address => uint) private userBalances;
    address payable owner;

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function deposit(address to, uint amount) public payable {
        require(msg.value == amount);
        userBalances[to] += amount;
    }

    function transfer(address to, uint amount) public {
        if (userBalances[msg.sender] >= amount) {
           userBalances[to] += amount;
           userBalances[msg.sender] -= amount;
        }
    }

    function getBalance() public view returns (uint) {
        return userBalances[msg.sender];
    }

    function withdrawBalance() public {
        bool ret;
        bytes memory data;
        (ret, data) = msg.sender.call.value(userBalances[msg.sender])("");
        userBalances[msg.sender] = 0;
    }

    event Reset();

    function reset() onlyOwner public payable {
        emit Reset();
        selfdestruct(owner);
    }

    event Donate(address indexed _from, uint _value);

    function () external payable {
        emit Donate(msg.sender, msg.value);
    }
}
