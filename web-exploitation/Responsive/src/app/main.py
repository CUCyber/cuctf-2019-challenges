import re
import socket
import requests
import ipaddress
from urllib.parse import urlparse

from xvfbwrapper import Xvfb
from selenium.webdriver import Firefox, FirefoxProfile
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import TimeoutException, WebDriverException

import pathlib
import tempfile
from flask import Flask, flash, request, redirect, url_for, render_template, render_template_string
from flask import send_from_directory
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = \
    tempfile.tempdir = '/tmp/uploads/'
app.config['SECRET_KEY'] = 'c05ee470c7a5bc13b7d426032d5b6aadd27c76121e687469f3fd260ea00718cc'

path = pathlib.Path(app.config['UPLOAD_FOLDER'])
path.mkdir(parents=True, exist_ok=True)

class FirefoxBrowser:

    def __init__(self):
        self.profile = self.mobile_profile()
        self.driver = Firefox(
            self.profile,
            capabilities=DesiredCapabilities().FIREFOX,
            executable_path='/usr/bin/geckodriver',
            options=Options().add_argument('-headless')
        )

    def mobile_profile(self):
        user_agent = ' '.join([
            "Mozilla/5.0",
            "(iPhone; CPU iPhone OS 11_4 like Mac OS X)",
            "AppleWebKit/605.1.15",
            "(KHTML, like Gecko)",
            "FxiOS/12.1b10941",
            "Mobile/15F79",
            "Safari/605.1.15"
        ])

        preferences = [
            ("general.useragent.override", user_agent),
            ("modifyheaders.config.active", True),
            ("modifyheaders.config.alwaysOn", True),
            ("modifyheaders.headers.count", 2),
            ("modifyheaders.headers.action0", "Add"),
            ("modifyheaders.headers.name0", "User-Agent"),
            ("modifyheaders.headers.value0", user_agent),
            ("modifyheaders.headers.enabled0", True),
            ("modifyheaders.headers.action1", "Add"),
            ("modifyheaders.headers.name1", "x-up-subno"),
            ("modifyheaders.headers.value1", "123-456-7890"),
            ("modifyheaders.headers.enabled1", True),
            ("browser.tabs.remote.autostart", False),
            ("browser.tabs.remote.autostart.2", False)
        ]
        profile = FirefoxProfile()
        for (key, value) in preferences:
            profile.set_preference(key, value)
        return profile


def check_title(url):
    TARGET = "RESDEV"
    MATCH = r'(?<=<title>).+?(?=</title>)'
    r = requests.get(url, verify=False)
    title = re.search(MATCH, r.text, re.DOTALL)
    return TARGET in title.group().strip()


def is_loopback(host):
    if host == "https://google.com":
        return None

    parsed = urlparse(host)
    if not all([parsed.scheme, parsed.netloc]):
        return "Not a valid URL"
    try:
        IP = socket.gethostbyname(parsed.netloc)
        if ipaddress.ip_address(IP).is_loopback:
            return "No loopback addresses allowed!"
    except socket.gaierror:
        return "Could not resolve host."
    if not check_title(parsed.scheme+"://"+IP+parsed.path):
        return "RESDEV not in Title"
    return None


@app.route('/error')
def error():
    return render_template("error.html", err=request.args['err']), 403


@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)


@app.route('/screenshot', methods=["POST"])
def screenshot():
    url = request.form.get('url', None)
    if not url:
        return redirect(url_for('error', err="No URL Provided"))

    err = is_loopback(url)
    if err != None:
        return render_template("error.html", err=err), 403

    uploads_folder = app.config['UPLOAD_FOLDER']
    filename = next(tempfile._get_candidate_names()) + ".png"

    with Xvfb(width=375, height=812) as xvfb:
        browser = FirefoxBrowser()
        browser.driver.maximize_window()
        try:
            browser.driver.set_page_load_timeout(60)
            browser.driver.get(url)
            print(browser.driver.page_source)
        except TimeoutException:
            browser.driver.quit()
            return redirect(url_for('error', err="Timeout Error"))
        except WebDriverException:
            browser.driver.quit()
            return redirect(url_for('error', err="Reached Error Page"))
        except ConnectionRefusedError as e:
            return render_template_string(str(e))
        except:
            browser.driver.quit()
            return redirect(url_for('error', err="Unhandled Exception"))
        finally:
            browser.driver.save_screenshot(
                f"{uploads_folder}{filename}"
            )
            browser.driver.quit()
        return redirect(url_for('uploaded_file', filename=filename))

@app.route("/")
def index():
    return render_template("index.html")

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=7700)
