import web3
import asyncio
import binascii
import socket
from web3.auto import w3

def handle_event(event, flag):
    try:
        tx = w3.eth.getTransaction(event)
    except web3.exceptions.TransactionNotFound:
        return

    data = tx.get('input', None)
    if not data:
        return

    try:
        conn = binascii.unhexlify(data[2:]).decode('utf-8')
        ip, port = conn.split(':')

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            s.connect((ip, int(port)))
            s.sendall((flag))
    except:
        pass

async def log_loop(event_filter, poll_interval):
    with open("flag.txt", "rb") as f:
        flag = f.read()

    while True:
        for event in event_filter.get_new_entries():
            handle_event(event, flag)
        await asyncio.sleep(poll_interval)

def main():
    block_filter = w3.eth.filter('latest')
    tx_filter = w3.eth.filter('pending')
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(
            asyncio.gather(
                log_loop(block_filter, 2),
                log_loop(tx_filter, 2)))
    finally:
        loop.close()

if __name__ == '__main__':
    main()
