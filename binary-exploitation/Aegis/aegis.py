import random
import signal
import string
import hashlib
import pathlib
import tempfile
import subprocess

from socketserver import (
	TCPServer,
	ForkingMixIn,
	BaseRequestHandler
)

tpl = None
flag = None

class AegisHandler(BaseRequestHandler):
    id = next(tempfile._get_candidate_names())
    count = 0

    def try_exploit(self, exploit):
        result = subprocess.run(
            [f"./binary{self.count}-{self.id}"],
            input=exploit,
            capture_output=True,
            timeout=3
        )

        pathlib.Path(f"binary{self.count}-{self.id}").unlink()

        if not result.stdout:
            return False

        if not b"Correct value" in result.stdout:
            return False

        return True

    def compile_template(self, template):
        with open(f"{self.id}.c", "w+") as f:
            f.write(template)

        subprocess.run(
            ["gcc", "-o", f"binary{self.count}-{self.id}", f"{self.id}.c"],
            stderr=subprocess.DEVNULL
        )

        pathlib.Path(f"{self.id}.c").unlink()

        with open(f"binary{self.count}-{self.id}", "rb") as f:
            binary = f.read()

        return binary

    def generate_template(self):
        buf_sz = str(random.randint(0x0010, 0x00FF))
        target = str(random.randint(0x1000, 0xFFFF))
        return string.Template(tpl).substitute(
            buf_sz=buf_sz, target=target
        )

    def proof_of_work(self):
        goal = hex(random.randint(0x100000, 0xFFFFFF))[2:]
        self.request.send(bytes(
            "Find Sha256 starting with " + goal + "\n", "utf-8"
        ))
        proof = self.request.recv(256).strip()
        result = hashlib.sha256(proof).hexdigest()

        print(result, goal)

        if result[:len(goal)] != goal:
            return False
        return True

    def handle(self):
        if not self.proof_of_work():
            return

        signal.alarm(10)

        while self.count < 5:
            new_tpl = self.generate_template()
            binary = self.compile_template(new_tpl)
            self.request.sendall(binary)
            exploit = self.request.recv(1024)
            if not self.try_exploit(exploit):
                quit()

            self.count = self.count + 1

        self.request.sendall(flag)

class ForkingTCPServer(ForkingMixIn, TCPServer):
    pass

def main():
    global tpl, flag

    with open("template.c", "r") as f:
        tpl = f.read()

    with open("flag.txt", "rb") as f:
        flag = f.read()

    server = ForkingTCPServer(
        server_address=("0.0.0.0", 9400),
        RequestHandlerClass=AegisHandler
    )
    server.serve_forever()

if __name__ == "__main__":
    main()
